# [doc = "Register `BDCR` reader"] pub struct R (crate :: R < BDCR_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < BDCR_SPEC > ; # [inline (always)] fn deref (& self) -> & Self :: Target { & self . 0 } } impl From < crate :: R < BDCR_SPEC > > for R { # [inline (always)] fn from (reader : crate :: R < BDCR_SPEC >) -> Self { R (reader) } } # [doc = "Register `BDCR` writer"] pub struct W (crate :: W < BDCR_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < BDCR_SPEC > ; # [inline (always)] fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)] fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl From < crate :: W < BDCR_SPEC > > for W { # [inline (always)] fn from (writer : crate :: W < BDCR_SPEC >) -> Self { W (writer) } } # [doc = "Field `LSEON` reader - External low-speed oscillator enable"] pub type LSEON_R = crate :: BitReader < bool > ; # [doc = "Field `LSEON` writer - External low-speed oscillator enable"] pub type LSEON_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , BDCR_SPEC , bool , O > ; # [doc = "Field `LSERDY` reader - External low-speed oscillator ready"] pub type LSERDY_R = crate :: BitReader < bool > ; # [doc = "Field `LSEBYP` reader - External low-speed oscillator bypass"] pub type LSEBYP_R = crate :: BitReader < bool > ; # [doc = "Field `LSEBYP` writer - External low-speed oscillator bypass"] pub type LSEBYP_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , BDCR_SPEC , bool , O > ; # [doc = "Field `RTCSEL` reader - RTC clock source selection"] pub type RTCSEL_R = crate :: FieldReader < u8 , u8 > ; # [doc = "Field `RTCSEL` writer - RTC clock source selection"] pub type RTCSEL_W < 'a , const O : u8 > = crate :: FieldWriter < 'a , u32 , BDCR_SPEC , u8 , u8 , 2 , O > ; # [doc = "Field `RTCEN` reader - RTC clock enable"] pub type RTCEN_R = crate :: BitReader < bool > ; # [doc = "Field `RTCEN` writer - RTC clock enable"] pub type RTCEN_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , BDCR_SPEC , bool , O > ; # [doc = "Field `BDRST` reader - Backup domain software reset"] pub type BDRST_R = crate :: BitReader < bool > ; # [doc = "Field `BDRST` writer - Backup domain software reset"] pub type BDRST_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , BDCR_SPEC , bool , O > ; # [doc = "Field `DBP` reader - Cancel Backup domain Write protection"] pub type DBP_R = crate :: BitReader < bool > ; # [doc = "Field `DBP` writer - Cancel Backup domain Write protection"] pub type DBP_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , BDCR_SPEC , bool , O > ; impl R { # [doc = "Bit 0 - External low-speed oscillator enable"] # [inline (always)] pub fn lseon (& self) -> LSEON_R { LSEON_R :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - External low-speed oscillator ready"] # [inline (always)] pub fn lserdy (& self) -> LSERDY_R { LSERDY_R :: new (((self . bits >> 1) & 1) != 0) } # [doc = "Bit 2 - External low-speed oscillator bypass"] # [inline (always)] pub fn lsebyp (& self) -> LSEBYP_R { LSEBYP_R :: new (((self . bits >> 2) & 1) != 0) } # [doc = "Bits 8:9 - RTC clock source selection"] # [inline (always)] pub fn rtcsel (& self) -> RTCSEL_R { RTCSEL_R :: new (((self . bits >> 8) & 3) as u8) } # [doc = "Bit 15 - RTC clock enable"] # [inline (always)] pub fn rtcen (& self) -> RTCEN_R { RTCEN_R :: new (((self . bits >> 15) & 1) != 0) } # [doc = "Bit 16 - Backup domain software reset"] # [inline (always)] pub fn bdrst (& self) -> BDRST_R { BDRST_R :: new (((self . bits >> 16) & 1) != 0) } # [doc = "Bit 24 - Cancel Backup domain Write protection"] # [inline (always)] pub fn dbp (& self) -> DBP_R { DBP_R :: new (((self . bits >> 24) & 1) != 0) } } impl W { # [doc = "Bit 0 - External low-speed oscillator enable"] # [inline (always)] # [must_use] pub fn lseon (& mut self) -> LSEON_W < 0 > { LSEON_W :: new (self) } # [doc = "Bit 2 - External low-speed oscillator bypass"] # [inline (always)] # [must_use] pub fn lsebyp (& mut self) -> LSEBYP_W < 2 > { LSEBYP_W :: new (self) } # [doc = "Bits 8:9 - RTC clock source selection"] # [inline (always)] # [must_use] pub fn rtcsel (& mut self) -> RTCSEL_W < 8 > { RTCSEL_W :: new (self) } # [doc = "Bit 15 - RTC clock enable"] # [inline (always)] # [must_use] pub fn rtcen (& mut self) -> RTCEN_W < 15 > { RTCEN_W :: new (self) } # [doc = "Bit 16 - Backup domain software reset"] # [inline (always)] # [must_use] pub fn bdrst (& mut self) -> BDRST_W < 16 > { BDRST_W :: new (self) } # [doc = "Bit 24 - Cancel Backup domain Write protection"] # [inline (always)] # [must_use] pub fn dbp (& mut self) -> DBP_W < 24 > { DBP_W :: new (self) } # [doc = "Writes raw bits to the register."] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "Backup Domain Control Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [bdcr](index.html) module"] pub struct BDCR_SPEC ; impl crate :: RegisterSpec for BDCR_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [bdcr::R](R) reader structure"] impl crate :: Readable for BDCR_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [bdcr::W](W) writer structure"] impl crate :: Writable for BDCR_SPEC { type Writer = W ; const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets BDCR to value 0"] impl crate :: Resettable for BDCR_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }