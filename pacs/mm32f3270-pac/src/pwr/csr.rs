# [doc = "Register `CSR` reader"] pub struct R (crate :: R < CSR_SPEC >) ; impl core :: ops :: Deref for R { type Target = crate :: R < CSR_SPEC > ; # [inline (always)] fn deref (& self) -> & Self :: Target { & self . 0 } } impl From < crate :: R < CSR_SPEC > > for R { # [inline (always)] fn from (reader : crate :: R < CSR_SPEC >) -> Self { R (reader) } } # [doc = "Register `CSR` writer"] pub struct W (crate :: W < CSR_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < CSR_SPEC > ; # [inline (always)] fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)] fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl From < crate :: W < CSR_SPEC > > for W { # [inline (always)] fn from (writer : crate :: W < CSR_SPEC >) -> Self { W (writer) } } # [doc = "Field `WUF` reader - Wakeup flag"] pub type WUF_R = crate :: BitReader < bool > ; # [doc = "Field `WUF` writer - Wakeup flag"] pub type WUF_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , CSR_SPEC , bool , O > ; # [doc = "Field `SBF` reader - Standby flag"] pub type SBF_R = crate :: BitReader < bool > ; # [doc = "Field `SBF` writer - Standby flag"] pub type SBF_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , CSR_SPEC , bool , O > ; # [doc = "Field `PVDO` reader - PVD output"] pub type PVDO_R = crate :: BitReader < bool > ; # [doc = "Field `PVDO` writer - PVD output"] pub type PVDO_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , CSR_SPEC , bool , O > ; # [doc = "Field `EWUP` reader - Enable WKUP pin"] pub type EWUP_R = crate :: BitReader < bool > ; # [doc = "Field `EWUP` writer - Enable WKUP pin"] pub type EWUP_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , CSR_SPEC , bool , O > ; impl R { # [doc = "Bit 0 - Wakeup flag"] # [inline (always)] pub fn wuf (& self) -> WUF_R { WUF_R :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - Standby flag"] # [inline (always)] pub fn sbf (& self) -> SBF_R { SBF_R :: new (((self . bits >> 1) & 1) != 0) } # [doc = "Bit 2 - PVD output"] # [inline (always)] pub fn pvdo (& self) -> PVDO_R { PVDO_R :: new (((self . bits >> 2) & 1) != 0) } # [doc = "Bit 8 - Enable WKUP pin"] # [inline (always)] pub fn ewup (& self) -> EWUP_R { EWUP_R :: new (((self . bits >> 8) & 1) != 0) } } impl W { # [doc = "Bit 0 - Wakeup flag"] # [inline (always)] # [must_use] pub fn wuf (& mut self) -> WUF_W < 0 > { WUF_W :: new (self) } # [doc = "Bit 1 - Standby flag"] # [inline (always)] # [must_use] pub fn sbf (& mut self) -> SBF_W < 1 > { SBF_W :: new (self) } # [doc = "Bit 2 - PVD output"] # [inline (always)] # [must_use] pub fn pvdo (& mut self) -> PVDO_W < 2 > { PVDO_W :: new (self) } # [doc = "Bit 8 - Enable WKUP pin"] # [inline (always)] # [must_use] pub fn ewup (& mut self) -> EWUP_W < 8 > { EWUP_W :: new (self) } # [doc = "Writes raw bits to the register."] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "Control Status Register\n\nThis register you can [`read`](crate::generic::Reg::read), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [csr](index.html) module"] pub struct CSR_SPEC ; impl crate :: RegisterSpec for CSR_SPEC { type Ux = u32 ; } # [doc = "`read()` method returns [csr::R](R) reader structure"] impl crate :: Readable for CSR_SPEC { type Reader = R ; } # [doc = "`write(|w| ..)` method takes [csr::W](W) writer structure"] impl crate :: Writable for CSR_SPEC { type Writer = W ; const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets CSR to value 0"] impl crate :: Resettable for CSR_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }