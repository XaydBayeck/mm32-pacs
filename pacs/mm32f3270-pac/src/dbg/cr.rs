# [doc = "Register `CR` writer"] pub struct W (crate :: W < CR_SPEC >) ; impl core :: ops :: Deref for W { type Target = crate :: W < CR_SPEC > ; # [inline (always)] fn deref (& self) -> & Self :: Target { & self . 0 } } impl core :: ops :: DerefMut for W { # [inline (always)] fn deref_mut (& mut self) -> & mut Self :: Target { & mut self . 0 } } impl From < crate :: W < CR_SPEC > > for W { # [inline (always)] fn from (writer : crate :: W < CR_SPEC >) -> Self { W (writer) } } # [doc = "Field `DBG_SLEEP` writer - Debug Sleep mode"] pub type DBG_SLEEP_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , CR_SPEC , bool , O > ; # [doc = "Field `DBG_STOP` writer - Debug Stop mode"] pub type DBG_STOP_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , CR_SPEC , bool , O > ; # [doc = "Field `DBG_STANDBY` writer - Debug Standby mode"] pub type DBG_STANDBY_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , CR_SPEC , bool , O > ; # [doc = "Field `DBG_STOP_FOR_LDO` writer - Debug Stop mode for Ldo"] pub type DBG_STOP_FOR_LDO_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , CR_SPEC , bool , O > ; # [doc = "Field `DBG_IWDG_STOP` writer - Debug independent watchdog stopped when core is hatled"] pub type DBG_IWDG_STOP_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , CR_SPEC , bool , O > ; # [doc = "Field `DBG_WWDG_STOP` writer - Debug window watchdog stopped when core is halted"] pub type DBG_WWDG_STOP_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , CR_SPEC , bool , O > ; # [doc = "Field `DBG_TIM1_STOP` writer - TIM1 counter stopped when core is halted"] pub type DBG_TIM1_STOP_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , CR_SPEC , bool , O > ; # [doc = "Field `DBG_TIM2_STOP` writer - TIM2 counter stopped when core is halted"] pub type DBG_TIM2_STOP_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , CR_SPEC , bool , O > ; # [doc = "Field `DBG_TIM3_STOP` writer - TIM3 counter stopped when core is halted"] pub type DBG_TIM3_STOP_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , CR_SPEC , bool , O > ; # [doc = "Field `DBG_TIM4_STOP` writer - TIM4 counter stopped when core is halted"] pub type DBG_TIM4_STOP_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , CR_SPEC , bool , O > ; # [doc = "Field `DBG_TIM8_STOP` writer - TIM8 counter stopped when core is halted"] pub type DBG_TIM8_STOP_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , CR_SPEC , bool , O > ; # [doc = "Field `DBG_TIM5_STOP` writer - TIM5 counter stopped when core is halted"] pub type DBG_TIM5_STOP_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , CR_SPEC , bool , O > ; # [doc = "Field `DBG_TIM6_STOP` writer - TIM6 counter stopped when core is halted"] pub type DBG_TIM6_STOP_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , CR_SPEC , bool , O > ; # [doc = "Field `DBG_TIM7_STOP` writer - TIM7 counter stopped when core is halted"] pub type DBG_TIM7_STOP_W < 'a , const O : u8 > = crate :: BitWriter < 'a , u32 , CR_SPEC , bool , O > ; impl W { # [doc = "Bit 0 - Debug Sleep mode"] # [inline (always)] # [must_use] pub fn dbg_sleep (& mut self) -> DBG_SLEEP_W < 0 > { DBG_SLEEP_W :: new (self) } # [doc = "Bit 1 - Debug Stop mode"] # [inline (always)] # [must_use] pub fn dbg_stop (& mut self) -> DBG_STOP_W < 1 > { DBG_STOP_W :: new (self) } # [doc = "Bit 2 - Debug Standby mode"] # [inline (always)] # [must_use] pub fn dbg_standby (& mut self) -> DBG_STANDBY_W < 2 > { DBG_STANDBY_W :: new (self) } # [doc = "Bit 3 - Debug Stop mode for Ldo"] # [inline (always)] # [must_use] pub fn dbg_stop_for_ldo (& mut self) -> DBG_STOP_FOR_LDO_W < 3 > { DBG_STOP_FOR_LDO_W :: new (self) } # [doc = "Bit 8 - Debug independent watchdog stopped when core is hatled"] # [inline (always)] # [must_use] pub fn dbg_iwdg_stop (& mut self) -> DBG_IWDG_STOP_W < 8 > { DBG_IWDG_STOP_W :: new (self) } # [doc = "Bit 9 - Debug window watchdog stopped when core is halted"] # [inline (always)] # [must_use] pub fn dbg_wwdg_stop (& mut self) -> DBG_WWDG_STOP_W < 9 > { DBG_WWDG_STOP_W :: new (self) } # [doc = "Bit 10 - TIM1 counter stopped when core is halted"] # [inline (always)] # [must_use] pub fn dbg_tim1_stop (& mut self) -> DBG_TIM1_STOP_W < 10 > { DBG_TIM1_STOP_W :: new (self) } # [doc = "Bit 11 - TIM2 counter stopped when core is halted"] # [inline (always)] # [must_use] pub fn dbg_tim2_stop (& mut self) -> DBG_TIM2_STOP_W < 11 > { DBG_TIM2_STOP_W :: new (self) } # [doc = "Bit 12 - TIM3 counter stopped when core is halted"] # [inline (always)] # [must_use] pub fn dbg_tim3_stop (& mut self) -> DBG_TIM3_STOP_W < 12 > { DBG_TIM3_STOP_W :: new (self) } # [doc = "Bit 13 - TIM4 counter stopped when core is halted"] # [inline (always)] # [must_use] pub fn dbg_tim4_stop (& mut self) -> DBG_TIM4_STOP_W < 13 > { DBG_TIM4_STOP_W :: new (self) } # [doc = "Bit 17 - TIM8 counter stopped when core is halted"] # [inline (always)] # [must_use] pub fn dbg_tim8_stop (& mut self) -> DBG_TIM8_STOP_W < 17 > { DBG_TIM8_STOP_W :: new (self) } # [doc = "Bit 18 - TIM5 counter stopped when core is halted"] # [inline (always)] # [must_use] pub fn dbg_tim5_stop (& mut self) -> DBG_TIM5_STOP_W < 18 > { DBG_TIM5_STOP_W :: new (self) } # [doc = "Bit 19 - TIM6 counter stopped when core is halted"] # [inline (always)] # [must_use] pub fn dbg_tim6_stop (& mut self) -> DBG_TIM6_STOP_W < 19 > { DBG_TIM6_STOP_W :: new (self) } # [doc = "Bit 20 - TIM7 counter stopped when core is halted"] # [inline (always)] # [must_use] pub fn dbg_tim7_stop (& mut self) -> DBG_TIM7_STOP_W < 20 > { DBG_TIM7_STOP_W :: new (self) } # [doc = "Writes raw bits to the register."] # [inline (always)] pub unsafe fn bits (& mut self , bits : u32) -> & mut Self { self . 0 . bits (bits) ; self } } # [doc = "Control Register\n\nThis register you can [`write_with_zero`](crate::generic::Reg::write_with_zero), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [cr](index.html) module"] pub struct CR_SPEC ; impl crate :: RegisterSpec for CR_SPEC { type Ux = u32 ; } # [doc = "`write(|w| ..)` method takes [cr::W](W) writer structure"] impl crate :: Writable for CR_SPEC { type Writer = W ; const ZERO_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : Self :: Ux = 0 ; } # [doc = "`reset()` method sets CR to value 0"] impl crate :: Resettable for CR_SPEC { const RESET_VALUE : Self :: Ux = 0 ; }